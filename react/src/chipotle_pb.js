/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
/* eslint-disable */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Coke', null, global);
goog.exportSymbol('proto.Coke.CokeType', null, global);
goog.exportSymbol('proto.Drink', null, global);
goog.exportSymbol('proto.Fresca', null, global);
goog.exportSymbol('proto.Fresca.FrescaType', null, global);
goog.exportSymbol('proto.Lemonade', null, global);
goog.exportSymbol('proto.Lemonade.LemonadeType', null, global);
goog.exportSymbol('proto.Meal', null, global);
goog.exportSymbol('proto.Meal.BeanType', null, global);
goog.exportSymbol('proto.Meal.MealType', null, global);
goog.exportSymbol('proto.Meal.MeatType', null, global);
goog.exportSymbol('proto.Meal.RiceType', null, global);
goog.exportSymbol('proto.Order', null, global);
goog.exportSymbol('proto.Response', null, global);
goog.exportSymbol('proto.Response.Action', null, global);
goog.exportSymbol('proto.Side', null, global);
goog.exportSymbol('proto.Side.SideType', null, global);
goog.exportSymbol('proto.Soda', null, global);
goog.exportSymbol('proto.Soda.SodaType', null, global);
goog.exportSymbol('proto.Sprite', null, global);
goog.exportSymbol('proto.Sprite.SpriteType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Lemonade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Lemonade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Lemonade.displayName = 'proto.Lemonade';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Lemonade.prototype.toObject = function(opt_includeInstance) {
  return proto.Lemonade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Lemonade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Lemonade.toObject = function(includeInstance, msg) {
  var f, obj = {
    drink: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Lemonade}
 */
proto.Lemonade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Lemonade;
  return proto.Lemonade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Lemonade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Lemonade}
 */
proto.Lemonade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Lemonade.LemonadeType} */ (reader.readEnum());
      msg.setDrink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Lemonade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Lemonade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Lemonade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Lemonade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDrink();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Lemonade.LemonadeType = {
  UNKNOWN: 0,
  LEMONADE: 1,
  HIBISCUS_LEMONADE: 2
};

/**
 * optional LemonadeType drink = 1;
 * @return {!proto.Lemonade.LemonadeType}
 */
proto.Lemonade.prototype.getDrink = function() {
  return /** @type {!proto.Lemonade.LemonadeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Lemonade.LemonadeType} value */
proto.Lemonade.prototype.setDrink = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Fresca = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Fresca, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Fresca.displayName = 'proto.Fresca';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Fresca.prototype.toObject = function(opt_includeInstance) {
  return proto.Fresca.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Fresca} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Fresca.toObject = function(includeInstance, msg) {
  var f, obj = {
    drink: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Fresca}
 */
proto.Fresca.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Fresca;
  return proto.Fresca.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Fresca} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Fresca}
 */
proto.Fresca.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Fresca.FrescaType} */ (reader.readEnum());
      msg.setDrink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Fresca.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Fresca.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Fresca} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Fresca.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDrink();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Fresca.FrescaType = {
  UNKNOWN: 0,
  MANDARIN_AGUA_FRESCA: 1,
  BERRY_AGUA_FRESCA: 2
};

/**
 * optional FrescaType drink = 1;
 * @return {!proto.Fresca.FrescaType}
 */
proto.Fresca.prototype.getDrink = function() {
  return /** @type {!proto.Fresca.FrescaType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Fresca.FrescaType} value */
proto.Fresca.prototype.setDrink = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Coke = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Coke, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Coke.displayName = 'proto.Coke';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Coke.prototype.toObject = function(opt_includeInstance) {
  return proto.Coke.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Coke} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Coke.toObject = function(includeInstance, msg) {
  var f, obj = {
    drink: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Coke}
 */
proto.Coke.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Coke;
  return proto.Coke.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Coke} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Coke}
 */
proto.Coke.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Coke.CokeType} */ (reader.readEnum());
      msg.setDrink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Coke.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Coke.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Coke} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Coke.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDrink();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Coke.CokeType = {
  UNKNOWN: 0,
  COKE: 1,
  DIET_COKE: 2,
  MEXICAN_COKE: 3
};

/**
 * optional CokeType drink = 1;
 * @return {!proto.Coke.CokeType}
 */
proto.Coke.prototype.getDrink = function() {
  return /** @type {!proto.Coke.CokeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Coke.CokeType} value */
proto.Coke.prototype.setDrink = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Sprite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Sprite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Sprite.displayName = 'proto.Sprite';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Sprite.prototype.toObject = function(opt_includeInstance) {
  return proto.Sprite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Sprite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sprite.toObject = function(includeInstance, msg) {
  var f, obj = {
    drink: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sprite}
 */
proto.Sprite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Sprite;
  return proto.Sprite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sprite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sprite}
 */
proto.Sprite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Sprite.SpriteType} */ (reader.readEnum());
      msg.setDrink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Sprite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Sprite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Sprite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sprite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDrink();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Sprite.SpriteType = {
  UNKNOWN: 0,
  SPRITE: 1,
  MEXICAN_SPRITE: 2
};

/**
 * optional SpriteType drink = 1;
 * @return {!proto.Sprite.SpriteType}
 */
proto.Sprite.prototype.getDrink = function() {
  return /** @type {!proto.Sprite.SpriteType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Sprite.SpriteType} value */
proto.Sprite.prototype.setDrink = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Soda = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Soda, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Soda.displayName = 'proto.Soda';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Soda.prototype.toObject = function(opt_includeInstance) {
  return proto.Soda.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Soda} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Soda.toObject = function(includeInstance, msg) {
  var f, obj = {
    drink: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Soda}
 */
proto.Soda.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Soda;
  return proto.Soda.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Soda} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Soda}
 */
proto.Soda.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Soda.SodaType} */ (reader.readEnum());
      msg.setDrink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Soda.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Soda.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Soda} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Soda.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDrink();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Soda.SodaType = {
  UNKNOWN: 0,
  MEDIUM_SODA: 1,
  LARGE_SODA: 2
};

/**
 * optional SodaType drink = 1;
 * @return {!proto.Soda.SodaType}
 */
proto.Soda.prototype.getDrink = function() {
  return /** @type {!proto.Soda.SodaType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Soda.SodaType} value */
proto.Soda.prototype.setDrink = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Drink = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Drink.oneofGroups_);
};
goog.inherits(proto.Drink, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Drink.displayName = 'proto.Drink';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Drink.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.Drink.DrinkCase = {
  DRINK_NOT_SET: 0,
  SODA: 1,
  LEMONADE: 2,
  FRESCA: 3,
  COKE: 4,
  SPRITE: 5
};

/**
 * @return {proto.Drink.DrinkCase}
 */
proto.Drink.prototype.getDrinkCase = function() {
  return /** @type {proto.Drink.DrinkCase} */(jspb.Message.computeOneofCase(this, proto.Drink.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Drink.prototype.toObject = function(opt_includeInstance) {
  return proto.Drink.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Drink} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Drink.toObject = function(includeInstance, msg) {
  var f, obj = {
    soda: (f = msg.getSoda()) && proto.Soda.toObject(includeInstance, f),
    lemonade: (f = msg.getLemonade()) && proto.Lemonade.toObject(includeInstance, f),
    fresca: (f = msg.getFresca()) && proto.Fresca.toObject(includeInstance, f),
    coke: (f = msg.getCoke()) && proto.Coke.toObject(includeInstance, f),
    sprite: (f = msg.getSprite()) && proto.Sprite.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Drink}
 */
proto.Drink.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Drink;
  return proto.Drink.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Drink} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Drink}
 */
proto.Drink.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Soda;
      reader.readMessage(value,proto.Soda.deserializeBinaryFromReader);
      msg.setSoda(value);
      break;
    case 2:
      var value = new proto.Lemonade;
      reader.readMessage(value,proto.Lemonade.deserializeBinaryFromReader);
      msg.setLemonade(value);
      break;
    case 3:
      var value = new proto.Fresca;
      reader.readMessage(value,proto.Fresca.deserializeBinaryFromReader);
      msg.setFresca(value);
      break;
    case 4:
      var value = new proto.Coke;
      reader.readMessage(value,proto.Coke.deserializeBinaryFromReader);
      msg.setCoke(value);
      break;
    case 5:
      var value = new proto.Sprite;
      reader.readMessage(value,proto.Sprite.deserializeBinaryFromReader);
      msg.setSprite(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Drink.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Drink.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Drink} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Drink.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoda();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Soda.serializeBinaryToWriter
    );
  }
  f = message.getLemonade();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Lemonade.serializeBinaryToWriter
    );
  }
  f = message.getFresca();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Fresca.serializeBinaryToWriter
    );
  }
  f = message.getCoke();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Coke.serializeBinaryToWriter
    );
  }
  f = message.getSprite();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Sprite.serializeBinaryToWriter
    );
  }
};


/**
 * optional Soda soda = 1;
 * @return {?proto.Soda}
 */
proto.Drink.prototype.getSoda = function() {
  return /** @type{?proto.Soda} */ (
    jspb.Message.getWrapperField(this, proto.Soda, 1));
};


/** @param {?proto.Soda|undefined} value */
proto.Drink.prototype.setSoda = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Drink.oneofGroups_[0], value);
};


proto.Drink.prototype.clearSoda = function() {
  this.setSoda(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Drink.prototype.hasSoda = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Lemonade lemonade = 2;
 * @return {?proto.Lemonade}
 */
proto.Drink.prototype.getLemonade = function() {
  return /** @type{?proto.Lemonade} */ (
    jspb.Message.getWrapperField(this, proto.Lemonade, 2));
};


/** @param {?proto.Lemonade|undefined} value */
proto.Drink.prototype.setLemonade = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.Drink.oneofGroups_[0], value);
};


proto.Drink.prototype.clearLemonade = function() {
  this.setLemonade(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Drink.prototype.hasLemonade = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Fresca fresca = 3;
 * @return {?proto.Fresca}
 */
proto.Drink.prototype.getFresca = function() {
  return /** @type{?proto.Fresca} */ (
    jspb.Message.getWrapperField(this, proto.Fresca, 3));
};


/** @param {?proto.Fresca|undefined} value */
proto.Drink.prototype.setFresca = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.Drink.oneofGroups_[0], value);
};


proto.Drink.prototype.clearFresca = function() {
  this.setFresca(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Drink.prototype.hasFresca = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Coke coke = 4;
 * @return {?proto.Coke}
 */
proto.Drink.prototype.getCoke = function() {
  return /** @type{?proto.Coke} */ (
    jspb.Message.getWrapperField(this, proto.Coke, 4));
};


/** @param {?proto.Coke|undefined} value */
proto.Drink.prototype.setCoke = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.Drink.oneofGroups_[0], value);
};


proto.Drink.prototype.clearCoke = function() {
  this.setCoke(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Drink.prototype.hasCoke = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Sprite sprite = 5;
 * @return {?proto.Sprite}
 */
proto.Drink.prototype.getSprite = function() {
  return /** @type{?proto.Sprite} */ (
    jspb.Message.getWrapperField(this, proto.Sprite, 5));
};


/** @param {?proto.Sprite|undefined} value */
proto.Drink.prototype.setSprite = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.Drink.oneofGroups_[0], value);
};


proto.Drink.prototype.clearSprite = function() {
  this.setSprite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Drink.prototype.hasSprite = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Side = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Side, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Side.displayName = 'proto.Side';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Side.prototype.toObject = function(opt_includeInstance) {
  return proto.Side.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Side} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Side.toObject = function(includeInstance, msg) {
  var f, obj = {
    side: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Side}
 */
proto.Side.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Side;
  return proto.Side.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Side} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Side}
 */
proto.Side.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Side.SideType} */ (reader.readEnum());
      msg.setSide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Side.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Side.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Side} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Side.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Side.SideType = {
  UNKNOWN: 0,
  CHIPS: 1,
  CHIPS_AND_GUACAMOLE: 2,
  CHIPS_AND_SALSA: 3,
  GUACAMOLE: 4,
  TORTILLA: 5
};

/**
 * optional SideType side = 1;
 * @return {!proto.Side.SideType}
 */
proto.Side.prototype.getSide = function() {
  return /** @type {!proto.Side.SideType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Side.SideType} value */
proto.Side.prototype.setSide = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Meal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Meal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Meal.displayName = 'proto.Meal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Meal.prototype.toObject = function(opt_includeInstance) {
  return proto.Meal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Meal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Meal.toObject = function(includeInstance, msg) {
  var f, obj = {
    mealType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    meatType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    riceType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    beanType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cheese: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    quesoBlanco: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    cornSalsa: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    mildSalsa: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    mediumGreenSalsa: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    hotRedSalsa: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    sourCream: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    guacamole: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    fajitas: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    lettuce: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    doubleWrap: +jspb.Message.getFieldWithDefault(msg, 15, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Meal}
 */
proto.Meal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Meal;
  return proto.Meal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Meal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Meal}
 */
proto.Meal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Meal.MealType} */ (reader.readEnum());
      msg.setMealType(value);
      break;
    case 2:
      var value = /** @type {!proto.Meal.MeatType} */ (reader.readEnum());
      msg.setMeatType(value);
      break;
    case 3:
      var value = /** @type {!proto.Meal.RiceType} */ (reader.readEnum());
      msg.setRiceType(value);
      break;
    case 4:
      var value = /** @type {!proto.Meal.BeanType} */ (reader.readEnum());
      msg.setBeanType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCheese(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setQuesoBlanco(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCornSalsa(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMildSalsa(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMediumGreenSalsa(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHotRedSalsa(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSourCream(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGuacamole(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFajitas(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLettuce(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDoubleWrap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Meal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Meal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Meal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Meal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMealType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMeatType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRiceType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getBeanType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCheese();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getQuesoBlanco();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getCornSalsa();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getMildSalsa();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getMediumGreenSalsa();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getHotRedSalsa();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getSourCream();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getGuacamole();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getFajitas();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getLettuce();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getDoubleWrap();
  if (f !== 0.0) {
    writer.writeFloat(
      15,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Meal.MealType = {
  UNKNOWN_MEAL: 0,
  BURRITO: 1,
  SOFT_TACOS: 2,
  CRISPY_TACOS: 3,
  SALAD: 4,
  BOWL: 5
};

/**
 * @enum {number}
 */
proto.Meal.MeatType = {
  UNKNOWN_MEAT: 0,
  CHICKEN: 1,
  STEAK: 2,
  BARBACOA: 3,
  CARNITAS: 4,
  VEGGIE: 5
};

/**
 * @enum {number}
 */
proto.Meal.RiceType = {
  UNKNOWN_RICE: 0,
  NO_RICE: 1,
  WHITE_RICE: 2,
  BROWN_RICE: 3
};

/**
 * @enum {number}
 */
proto.Meal.BeanType = {
  UNKNOWN_BEANS: 0,
  NO_BEANS: 1,
  PINTO_BEANS: 2,
  BLACK_BEANS: 3
};

/**
 * optional MealType meal_type = 1;
 * @return {!proto.Meal.MealType}
 */
proto.Meal.prototype.getMealType = function() {
  return /** @type {!proto.Meal.MealType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Meal.MealType} value */
proto.Meal.prototype.setMealType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional MeatType meat_type = 2;
 * @return {!proto.Meal.MeatType}
 */
proto.Meal.prototype.getMeatType = function() {
  return /** @type {!proto.Meal.MeatType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Meal.MeatType} value */
proto.Meal.prototype.setMeatType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional RiceType rice_type = 3;
 * @return {!proto.Meal.RiceType}
 */
proto.Meal.prototype.getRiceType = function() {
  return /** @type {!proto.Meal.RiceType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.Meal.RiceType} value */
proto.Meal.prototype.setRiceType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional BeanType bean_type = 4;
 * @return {!proto.Meal.BeanType}
 */
proto.Meal.prototype.getBeanType = function() {
  return /** @type {!proto.Meal.BeanType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.Meal.BeanType} value */
proto.Meal.prototype.setBeanType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional float Cheese = 5;
 * @return {number}
 */
proto.Meal.prototype.getCheese = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.Meal.prototype.setCheese = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float Queso_Blanco = 6;
 * @return {number}
 */
proto.Meal.prototype.getQuesoBlanco = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.Meal.prototype.setQuesoBlanco = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float Corn_Salsa = 7;
 * @return {number}
 */
proto.Meal.prototype.getCornSalsa = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.Meal.prototype.setCornSalsa = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float Mild_Salsa = 8;
 * @return {number}
 */
proto.Meal.prototype.getMildSalsa = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.Meal.prototype.setMildSalsa = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float Medium_Green_Salsa = 9;
 * @return {number}
 */
proto.Meal.prototype.getMediumGreenSalsa = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.Meal.prototype.setMediumGreenSalsa = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float Hot_Red_Salsa = 10;
 * @return {number}
 */
proto.Meal.prototype.getHotRedSalsa = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.Meal.prototype.setHotRedSalsa = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float Sour_Cream = 11;
 * @return {number}
 */
proto.Meal.prototype.getSourCream = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.Meal.prototype.setSourCream = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float Guacamole = 12;
 * @return {number}
 */
proto.Meal.prototype.getGuacamole = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.Meal.prototype.setGuacamole = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float Fajitas = 13;
 * @return {number}
 */
proto.Meal.prototype.getFajitas = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.Meal.prototype.setFajitas = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float Lettuce = 14;
 * @return {number}
 */
proto.Meal.prototype.getLettuce = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.Meal.prototype.setLettuce = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional float Double_Wrap = 15;
 * @return {number}
 */
proto.Meal.prototype.getDoubleWrap = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.Meal.prototype.setDoubleWrap = function(value) {
  jspb.Message.setProto3FloatField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Order.oneofGroups_);
};
goog.inherits(proto.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Order.displayName = 'proto.Order';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Order.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.Order.OrderCase = {
  ORDER_NOT_SET: 0,
  MEAL: 1,
  SIDE: 2,
  DRINK: 3
};

/**
 * @return {proto.Order.OrderCase}
 */
proto.Order.prototype.getOrderCase = function() {
  return /** @type {proto.Order.OrderCase} */(jspb.Message.computeOneofCase(this, proto.Order.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    meal: (f = msg.getMeal()) && proto.Meal.toObject(includeInstance, f),
    side: (f = msg.getSide()) && proto.Side.toObject(includeInstance, f),
    drink: (f = msg.getDrink()) && proto.Drink.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Order}
 */
proto.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Order;
  return proto.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Order}
 */
proto.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Meal;
      reader.readMessage(value,proto.Meal.deserializeBinaryFromReader);
      msg.setMeal(value);
      break;
    case 2:
      var value = new proto.Side;
      reader.readMessage(value,proto.Side.deserializeBinaryFromReader);
      msg.setSide(value);
      break;
    case 3:
      var value = new proto.Drink;
      reader.readMessage(value,proto.Drink.deserializeBinaryFromReader);
      msg.setDrink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Meal.serializeBinaryToWriter
    );
  }
  f = message.getSide();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Side.serializeBinaryToWriter
    );
  }
  f = message.getDrink();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Drink.serializeBinaryToWriter
    );
  }
};


/**
 * optional Meal meal = 1;
 * @return {?proto.Meal}
 */
proto.Order.prototype.getMeal = function() {
  return /** @type{?proto.Meal} */ (
    jspb.Message.getWrapperField(this, proto.Meal, 1));
};


/** @param {?proto.Meal|undefined} value */
proto.Order.prototype.setMeal = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Order.oneofGroups_[0], value);
};


proto.Order.prototype.clearMeal = function() {
  this.setMeal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Order.prototype.hasMeal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Side side = 2;
 * @return {?proto.Side}
 */
proto.Order.prototype.getSide = function() {
  return /** @type{?proto.Side} */ (
    jspb.Message.getWrapperField(this, proto.Side, 2));
};


/** @param {?proto.Side|undefined} value */
proto.Order.prototype.setSide = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.Order.oneofGroups_[0], value);
};


proto.Order.prototype.clearSide = function() {
  this.setSide(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Order.prototype.hasSide = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Drink drink = 3;
 * @return {?proto.Drink}
 */
proto.Order.prototype.getDrink = function() {
  return /** @type{?proto.Drink} */ (
    jspb.Message.getWrapperField(this, proto.Drink, 3));
};


/** @param {?proto.Drink|undefined} value */
proto.Order.prototype.setDrink = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.Order.oneofGroups_[0], value);
};


proto.Order.prototype.clearDrink = function() {
  this.setDrink(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Order.prototype.hasDrink = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Response.repeatedFields_, null);
};
goog.inherits(proto.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Response.displayName = 'proto.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Response.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    order: (f = msg.getOrder()) && proto.Order.toObject(includeInstance, f),
    action: jspb.Message.getFieldWithDefault(msg, 2, 0),
    probabilitiesList: jspb.Message.getRepeatedFloatingPointField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Response}
 */
proto.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Response;
  return proto.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Response}
 */
proto.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Order;
      reader.readMessage(value,proto.Order.deserializeBinaryFromReader);
      msg.setOrder(value);
      break;
    case 2:
      var value = /** @type {!proto.Response.Action} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setProbabilitiesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrder();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Order.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getProbabilitiesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Response.Action = {
  UNKNOWN: 0,
  VIEW: 1,
  CLEAR: 2,
  AFFIRM: 3,
  DENY: 4,
  ORDER: 5,
  REMOVE: 6
};

/**
 * optional Order order = 1;
 * @return {?proto.Order}
 */
proto.Response.prototype.getOrder = function() {
  return /** @type{?proto.Order} */ (
    jspb.Message.getWrapperField(this, proto.Order, 1));
};


/** @param {?proto.Order|undefined} value */
proto.Response.prototype.setOrder = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Response.prototype.clearOrder = function() {
  this.setOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Response.prototype.hasOrder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Action action = 2;
 * @return {!proto.Response.Action}
 */
proto.Response.prototype.getAction = function() {
  return /** @type {!proto.Response.Action} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Response.Action} value */
proto.Response.prototype.setAction = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated float probabilities = 3;
 * @return {!Array<number>}
 */
proto.Response.prototype.getProbabilitiesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/** @param {!Array<number>} value */
proto.Response.prototype.setProbabilitiesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Response.prototype.addProbabilities = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.Response.prototype.clearProbabilitiesList = function() {
  this.setProbabilitiesList([]);
};


goog.object.extend(exports, proto);
